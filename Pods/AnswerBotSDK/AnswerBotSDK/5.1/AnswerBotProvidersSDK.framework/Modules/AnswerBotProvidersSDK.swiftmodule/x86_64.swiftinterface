// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target x86_64-apple-ios9.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AnswerBotProvidersSDK
@_exported import AnswerBotProvidersSDK
import Foundation
import Swift
import ZendeskCoreSDK
import ZendeskProviderSDK
@objc(ZDKAnswerBotSettings) final public class AnswerBotSettings : ObjectiveC.NSObject, Swift.Decodable, ZendeskCoreSDK.DecodableDefault {
  public typealias DefaultType = AnswerBotProvidersSDK.AnswerBotSettings
  @objc final public let enabled: Swift.Bool
  required public init(from decoder: Swift.Decoder) throws
  @objc required override dynamic public init()
  public static var `default`: AnswerBotProvidersSDK.AnswerBotSettings {
    get
  }
  @objc deinit
}
public struct DeflectionArticle : Swift.Codable {
  public let id: Swift.Int64
  public let title: Swift.String
  public let htmlURL: Swift.String
  public let url: Swift.String
  public let labelNames: [Swift.String]
  public let body: Swift.String
  public let articleId: Swift.Int64
  public let locale: Swift.String
  public let brandId: Swift.Int64
  public let score: Swift.Double
  public let snippet: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias AnswerBotProviderCallBack = (Any?, Swift.Error?) -> Swift.Void
public protocol AnswerBotProviderProtocol {
  func getGreeting(callback: @escaping AnswerBotProvidersSDK.AnswerBotProviderCallBack)
  func getDeflectionForQuery(query: Swift.String, callback: @escaping AnswerBotProvidersSDK.AnswerBotProviderCallBack)
  func resolveWithArticle(deflectionId: Swift.Int64, articleId: Swift.Int64, interactionAccessToken: Swift.String, callback: @escaping AnswerBotProvidersSDK.AnswerBotProviderCallBack)
  func rejectWithArticle(deflectionId: Swift.Int64, articleId: Swift.Int64, interactionAccessToken: Swift.String, reason: AnswerBotProvidersSDK.RejectionReason, callback: @escaping AnswerBotProvidersSDK.AnswerBotProviderCallBack)
}
public enum RejectionReason : Swift.Int {
  case unknown
  case notRelated
  case relatedButDidntAnswer
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
public struct GreetingRequestResponse {
  public let greetings: [Swift.String]
  public let enabled: Swift.Bool
}
public struct DeflectionResponse : Swift.Codable {
  public let deflection: AnswerBotProvidersSDK.Deflection
  public let deflectionArticles: [AnswerBotProvidersSDK.DeflectionArticle]
  public let interactionAccessToken: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Deflection : Swift.Codable {
  public let deflectionID: Swift.Int64
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(ZDKAnswerBot) final public class AnswerBot : ObjectiveC.NSObject {
  final public let provider: AnswerBotProvidersSDK.AnswerBotProviderProtocol
  @objc final public class func initialize(withZendesk zendesk: ZendeskCoreSDK.Zendesk?, support: ZendeskProviderSDK.Support)
  @objc public static var instance: AnswerBotProvidersSDK.AnswerBot? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct AnswerBotDispatcherResponse {
  public let response: Foundation.HTTPURLResponse
  public let data: Foundation.Data?
}
extension AnswerBotProvidersSDK.RejectionReason : Swift.Equatable {}
extension AnswerBotProvidersSDK.RejectionReason : Swift.Hashable {}
extension AnswerBotProvidersSDK.RejectionReason : Swift.RawRepresentable {}
